// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model User {
  id               String         @id @unique @default(uuid())
  name             String
  email            String         @unique
  passwordHash     String
  role             UserRole
  lastLogin        DateTime?
  documents        Document[]
  conversations    Conversation[]
  refreshTokenHash String?
  blocked          Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("users")
}

model Document {
  id               String         @id @unique @default(uuid())
  fileName         String
  content          String
  s3BucketFilePath String
  s3BucketFileKey  String
  contentEmbedding Bytes
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations    Conversation[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("documents")
}

model Conversation {
  id          String      @id @unique @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId  String
  document    Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  chatEntries ChatEntry[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("conversations")
}

model ChatEntry {
  id             String       @id @unique @default(uuid())
  question       String
  answer         String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("chat_entries")
}
